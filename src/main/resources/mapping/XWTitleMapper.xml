<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.XCCuisine.dao.XWTitleMapper">
  <resultMap id="BaseResultMap" type="com.XCCuisine.dao.po.XWTitle">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="image" jdbcType="VARCHAR" property="image" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, title, author, image, content, createTime, updateTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from xw_title
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from xw_title
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.XCCuisine.dao.po.XWTitle">
    insert into xw_title (id, title, author, 
       image, content,
      createTime, updateTime)
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, 
      #{image,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR},
      #{createtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP})
  </insert>

  <insert id="insertSelective" parameterType="com.XCCuisine.dao.po.XWTitle" useGeneratedKeys="true" keyProperty="id">
    insert into xw_title
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="image != null">
        image,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="updatetime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="image != null">
        #{image,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.XCCuisine.dao.po.XWTitle">
    update xw_title
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="image != null">
        image = #{image,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updateTime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.XCCuisine.dao.po.XWTitle">
    update xw_title
    set title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      image = #{image,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      updateTime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>



    <select id="getXwTitleList" resultType="java.util.HashMap">
        SELECT
        t.*,
        GROUP_CONCAT(l.label_id) as labelId,
        GROUP_CONCAT(l.label) as   label
        FROM (select * from xw_title limit #{currIndex,jdbcType=INTEGER} , #{pageSize,jdbcType=INTEGER}) t
        left join (SELECT  tl.title_id, tl.label_id,l.label from xw_title_label tl left join xw_label l on l.id = tl.label_id) l
        on l.title_id = t.id
        group by t.id
    </select>

    <select id="getXwTitleById"  resultType="java.util.HashMap">
        SELECT
        t.*,
        GROUP_CONCAT(l.id) as labelId,
        GROUP_CONCAT(l.label) as   label
        FROM
        xw_title t
        left join xw_title_label tl
        on tl.title_id = t.id
        left join xw_label l
        on tl.label_id = l.id
        WHERE
        t.id = #{id,jdbcType=INTEGER}
		group by t.id

    </select>
</mapper>